class GhostFluxApp {
    constructor() {
        this.tg = window.Telegram.WebApp;
        this.user = null;
        this.balance = 100; // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è —Ç–µ—Å—Ç–∞
        this.inventory = [];
        
        this.init();
    }

    async init() {
        try {
            // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram WebApp
            this.tg.expand();
            this.tg.enableClosingConfirmation();
            
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.user = this.tg.initDataUnsafe.user;
            
            if (this.user) {
                this.showMainUI();
            } else {
                // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                this.user = { id: 123456789, username: 'test_user' };
                this.showMainUI();
            }
        } catch (error) {
            console.error('Initialization error:', error);
            // –í—Å–µ —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
            this.user = { id: 123456789, username: 'test_user' };
            this.showMainUI();
        }
    }

    showMainUI() {
        document.getElementById('loader').classList.add('hidden');
        document.getElementById('main-ui').classList.remove('hidden');
        this.updateBalanceDisplay();
        this.setupEventListeners();
    }

    setupEventListeners() {
        // –ö–Ω–æ–ø–∫–∞ —Å–ø–∏–Ω–∞ —Ä—É–ª–µ—Ç–∫–∏
        document.getElementById('spin-btn').addEventListener('click', () => {
            this.spinRoulette();
        });

        // –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å
        document.getElementById('daily-bonus-btn').addEventListener('click', () => {
            this.claimDailyBonus();
        });

        // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
        document.getElementById('inventory-btn').addEventListener('click', () => {
            this.showInventory();
        });

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        document.querySelectorAll('.close-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                e.target.closest('.modal').classList.add('hidden');
            });
        });
    }

    async spinRoulette() {
        if (this.balance < 25) {
            alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è —Å–ø–∏–Ω–∞!');
            return;
        }

        const spinBtn = document.getElementById('spin-btn');
        spinBtn.disabled = true;

        try {
            // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É
            const wonItem = this.getRandomItem();
            
            // –ê–Ω–∏–º–∞—Ü–∏—è —Ä—É–ª–µ—Ç–∫–∏
            await this.animateRoulette(wonItem);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            this.balance -= 25; // –°—Ç–æ–∏–º–æ—Å—Ç—å —Å–ø–∏–Ω–∞
            this.balance += wonItem.value; // –í—ã–∏–≥—Ä—ã—à
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            this.inventory.push(wonItem);
            
            this.updateBalanceDisplay();
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
            this.showWinModal(wonItem);

        } catch (error) {
            console.error('Error spinning roulette:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏ —Ä—É–ª–µ—Ç–∫–∏');
        }

        spinBtn.disabled = false;
    }

    getRandomItem() {
        const items = [
            {"name": "–ú–∏—à–∫–∞", "value": 15, "chance": 35, "emoji": "üß∏"},
            {"name": "–°–µ—Ä–¥–µ—á–∫–æ", "value": 15, "chance": 35, "emoji": "üíñ"},
            {"name": "–†–∞–∫–µ—Ç–∞", "value": 50, "chance": 10, "emoji": "üöÄ"},
            {"name": "–¢–æ—Ä—Ç", "value": 50, "chance": 10, "emoji": "üéÇ"},
            {"name": "–ö—É–±–æ–∫", "value": 100, "chance": 5, "emoji": "üèÜ"},
            {"name": "–ö–æ–ª—å—Ü–æ", "value": 100, "chance": 5, "emoji": "üíç"}
        ];

        // –ü—Ä–æ—Å—Ç–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
        const random = Math.random() * 100;
        let currentChance = 0;

        for (const item of items) {
            currentChance += item.chance;
            if (random <= currentChance) {
                return item;
            }
        }

        return items[0]; // fallback
    }

    async animateRoulette(winningItem) {
        const roulette = document.getElementById('roulette');
        const items = roulette.querySelectorAll('.roulette-item');
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –∞–Ω–∏–º–∞—Ü–∏–∏
        roulette.classList.add('spinning');
        
        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        // –£–±–∏—Ä–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        roulette.classList.remove('spinning');
        
        // –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç
        items.forEach(item => {
            item.classList.remove('highlight');
            if (item.textContent.includes(winningItem.emoji)) {
                item.classList.add('highlight');
            }
        });
    }

    async claimDailyBonus() {
        const bonusBtn = document.getElementById('daily-bonus-btn');
        bonusBtn.disabled = true;

        try {
            // –ò–º–∏—Ç–∞—Ü–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞
            const bonuses = [
                {"stars": 5, "chance": 70},
                {"stars": 10, "chance": 15},
                {"stars": 25, "chance": 10},
                {"stars": 50, "chance": 5}
            ];

            const random = Math.random() * 100;
            let currentChance = 0;
            let bonus = 5;

            for (const b of bonuses) {
                currentChance += b.chance;
                if (random <= currentChance) {
                    bonus = b.stars;
                    break;
                }
            }

            this.balance += bonus;
            this.updateBalanceDisplay();
            
            alert(`üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${bonus} –∑–≤—ë–∑–¥!`);

        } catch (error) {
            console.error('Error claiming bonus:', error);
            alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–æ–Ω—É—Å–∞');
        }

        bonusBtn.disabled = false;
    }

    async showInventory() {
        this.renderInventory();
        document.getElementById('inventory-modal').classList.remove('hidden');
    }

    renderInventory() {
        const inventoryList = document.getElementById('inventory-list');
        
        if (this.inventory.length === 0) {
            inventoryList.innerHTML = '<p style="text-align: center; padding: 20px;">üéí –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç</p>';
            return;
        }

        inventoryList.innerHTML = this.inventory.map((item, index) => `
            <div class="inventory-item">
                <div>
                    <strong>${item.emoji} ${item.name}</strong>
                    <br>
                    <small>${item.value} –∑–≤—ë–∑–¥</small>
                </div>
                <button class="withdraw-btn" onclick="app.withdrawItem(${index})">
                    –í—ã–≤–µ—Å—Ç–∏
                </button>
            </div>
        `).join('');
    }

    withdrawItem(index) {
        const item = this.inventory[index];
        if (!confirm(`–í—ã–≤–µ—Å—Ç–∏ ${item.name} (${item.value} –∑–≤—ë–∑–¥)?\n\n–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä @KXKXKXKXKXKXKXKXKXKXK —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.`)) {
            return;
        }

        // –£–¥–∞–ª—è–µ–º –∏–∑ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        this.inventory.splice(index, 1);
        this.renderInventory();
        
        alert('‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ Telegram.');
    }

    showWinModal(item) {
        const winItem = document.getElementById('win-item');
        winItem.innerHTML = `
            <div style="font-size: 48px;">${item.emoji}</div>
            <h3>${item.name}</h3>
            <p>${item.value} –∑–≤—ë–∑–¥</p>
        `;
        
        document.getElementById('win-modal').classList.remove('hidden');
    }

    updateBalanceDisplay() {
        document.getElementById('balance').textContent = this.balance;
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
let app;
document.addEventListener('DOMContentLoaded', () => {
    app = new GhostFluxApp();
});