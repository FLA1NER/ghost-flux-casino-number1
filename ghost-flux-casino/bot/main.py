import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import requests
import json
from config import BOT_TOKEN, ADMIN_ID, ADMIN_USERNAME, CHANNEL_USERNAME, WEBAPP_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ë–∞–∑–æ–≤—ã–π URL API
API_BASE_URL = "http://localhost:5000/api"

def make_api_request(endpoint, method='GET', data=None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        url = f"{API_BASE_URL}/{endpoint}"
        logger.info(f"Making API request to: {url}")
        
        if method == 'GET':
            response = requests.get(url, timeout=10)
        elif method == 'POST':
            response = requests.post(url, json=data, timeout=10)
        
        logger.info(f"API response status: {response.status_code}")
        
        if response.status_code == 200:
            return response.json()
        else:
            logger.error(f"API Error: {response.status_code} - {response.text}")
            return None
    except requests.exceptions.RequestException as e:
        logger.error(f"Request failed: {e}")
        return None
    except json.JSONDecodeError as e:
        logger.error(f"JSON decode error: {e}")
        return None

def escape_markdown(text):
    """–≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2"""
    if not text:
        return ""
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return ''.join(['\\' + char if char in escape_chars else char for char in str(text)])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user = update.effective_user
        user_id = user.id
        username = user.username or "Unknown"
        
        logger.info(f"Start command from user {user_id} (@{username})")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–æ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –µ—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
        try:
            result = make_api_request('register', 'POST', {
                'user_id': user_id,
                'username': username
            })
            
            if result is None:
                logger.warning(f"Failed to register user {user_id}, but continuing...")
            else:
                logger.info(f"User {user_id} registered successfully")
        except Exception as e:
            logger.warning(f"Registration failed but continuing: {e}")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton("üéÆ –û—Ç–∫—Ä—ã—Ç—å Ghost FluX Casino", web_app={'url': WEBAPP_URL})],
            [InlineKeyboardButton("üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=f"https://t.me/{CHANNEL_USERNAME}")],
            [InlineKeyboardButton("üí¨ –ö—É–ø–∏—Ç—å –∑–≤—ë–∑–¥—ã", url=ADMIN_USERNAME)]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # –¢–µ–∫—Å—Ç –±–µ–∑ Markdown –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        welcome_text = f"""üëª –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Ghost FluX Casino!

üé∞ –ò–≥—Ä–æ–≤—ã–µ —Ä–µ–∂–∏–º—ã:
‚Ä¢ üé° –†—É–ª–µ—Ç–∫–∞ (25 –∑–≤—ë–∑–¥)
‚Ä¢ üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –±–æ–Ω—É—Å

üí´ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:
50 –∑–≤—ë–∑–¥ = 85 —Ä—É–±
100 –∑–≤—ë–∑–¥ = 160 —Ä—É–±
250 –∑–≤—ë–∑–¥ = 400 —Ä—É–±

üíå –°–≤—è–∑—å: {ADMIN_USERNAME}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–∑–∏–Ω–æ! üéÆ"""
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup
            # –£–±—Ä–∞–ª parse_mode –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–æ–∫
        )
        
        logger.info(f"Start message sent to user {user_id}")
        
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id != ADMIN_ID:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        keyboard = [
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")],
            [InlineKeyboardButton("üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥", callback_data="admin_withdrawals")],
            [InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã", callback_data="admin_add_stars")],
            [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_refresh")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("üëë –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"Error in admin_panel: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏")

async def handle_admin_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        user_id = query.from_user.id
        
        if user_id != ADMIN_ID:
            await query.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        await query.answer()
        data = query.data
        
        if data == "admin_withdrawals":
            withdrawals = make_api_request('admin/withdrawals')
            
            if not withdrawals:
                text = "üì≠ –ù–µ—Ç pending –∑–∞—è–≤–æ–∫ –Ω–∞ –≤—ã–≤–æ–¥"
            else:
                text = "üì§ –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:\n\n"
                for w in withdrawals:
                    text += f"ID: {w['id']}\n"
                    text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{w['username']} (ID: {w['user_id']})\n"
                    text += f"–ü—Ä–µ–¥–º–µ—Ç: {w['item_name']} ({w['item_value']} –∑–≤—ë–∑–¥)\n"
                    text += f"–í—Ä–µ–º—è: {w['created_at'][:19]}\n"
                    text += "‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ‚éØ\n"
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_withdrawals")],
                [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        elif data == "admin_stats":
            stats = make_api_request('admin/stats')
            
            if stats:
                users_count = stats.get('total_users', 'N/A')
                total_withdrawals = stats.get('total_withdrawals', 'N/A')
            else:
                users_count = "N/A"
                total_withdrawals = "N/A"
            
            text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Ghost FluX\n\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}\n"
                f"üì§ –í—Å–µ–≥–æ –≤—ã–≤–æ–¥–æ–≤: {total_withdrawals}\n"
                f"üëë –ê–¥–º–∏–Ω: {ADMIN_USERNAME}"
            )
            
            keyboard = [
                [InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="admin_stats")],
                [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        elif data == "admin_add_stars":
            text = (
                "‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–≤—ë–∑–¥\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                "/addstars user_id amount\n\n"
                "–ü—Ä–∏–º–µ—Ä:\n"
                "/addstars 123456789 100"
            )
            
            keyboard = [
                [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="admin_back")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await query.edit_message_text(text, reply_markup=reply_markup)
        
        elif data == "admin_back" or data == "admin_refresh":
            await admin_panel(update, context)
            
    except Exception as e:
        logger.error(f"Error in handle_admin_callback: {e}")
        await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

async def add_stars_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        if user_id != ADMIN_ID:
            await update.message.reply_text("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
            return
        
        if len(context.args) != 2:
            await update.message.reply_text(
                "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addstars user_id amount\n"
                "–ü—Ä–∏–º–µ—Ä: /addstars 123456789 100"
            )
            return
        
        target_user_id = int(context.args[0])
        amount = int(context.args[1])
        
        result = make_api_request('admin/add-stars', 'POST', {
            'user_id': target_user_id,
            'amount': amount
        })
        
        if result:
            await update.message.reply_text(
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount}‚≠ê –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}"
            )
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            try:
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=f"üéâ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {amount}‚≠ê –Ω–∞ –±–∞–ª–∞–Ω—Å!\n\nüí´ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –≤ Mini App"
                )
            except Exception as e:
                logger.warning(f"Could not notify user {target_user_id}: {e}")
                
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–≤—ë–∑–¥")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–≤—ë–∑–¥")
    except Exception as e:
        logger.error(f"Error in add_stars_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    help_text = """
ü§ñ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ Ghost FluX:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/stats - –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üëë –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:
/admin - –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
/addstars user_id amount - –î–æ–±–∞–≤–∏—Ç—å –∑–≤—ë–∑–¥—ã
/complete withdrawal_id - –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–≤–æ–¥

üí´ –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞:
50‚≠ê = 85 —Ä—É–± | 100‚≠ê = 160 —Ä—É–± | 250‚≠ê = 400 —Ä—É–±
–°–≤—è–∑—å: @KXKXKXKXKXKXKXKXKXKXK
    """
    await update.message.reply_text(help_text)

async def user_stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = update.effective_user.id
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        if len(context.args) == 1 and update.effective_user.id == ADMIN_ID:
            try:
                target_user_id = int(context.args[0])
            except ValueError:
                target_user_id = user_id
        else:
            target_user_id = user_id
        
        stats = make_api_request(f'user/stats/{target_user_id}')
        user_data = make_api_request(f'user/{target_user_id}')
        
        if stats and user_data:
            username = user_data.get('username', 'Unknown')
            balance = user_data.get('balance', 0)
            
            text = (
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username}\n\n"
                f"üÜî ID: {target_user_id}\n"
                f"‚≠ê –ë–∞–ª–∞–Ω—Å: {balance}\n"
                f"üé° –°–ø–∏–Ω–æ–≤: {stats.get('spins_count', 0)}\n"
                f"üèÜ –í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–æ: {stats.get('total_won', 0)}‚≠ê\n"
            )
            
            if stats.get('last_spin'):
                text += f"‚è∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π —Å–ø–∏–Ω: {stats['last_spin'][:19]}"
            
            await update.message.reply_text(text)
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
            
    except Exception as e:
        logger.error(f"Error in user_stats_command: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
    try:
        logger.error(f"Exception while handling an update: {context.error}", exc_info=context.error)
        
        # –ë–æ–ª–µ–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        error_message = f"""
‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞.

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
‚Ä¢ –°–µ—Ä–≤–µ—Ä –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
‚Ä¢ –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º: {ADMIN_USERNAME}
        """
        
        if update and update.effective_message:
            await update.effective_message.reply_text(error_message)
    except Exception as e:
        logger.error(f"Error in error handler: {e}")

def main():
    try:
        logger.info("Starting Ghost FluX Casino Bot...")
        logger.info(f"Admin ID: {ADMIN_ID}")
        logger.info(f"WebApp URL: {WEBAPP_URL}")
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("help", help_command))
        application.add_handler(CommandHandler("admin", admin_panel))
        application.add_handler(CommandHandler("addstars", add_stars_command))
        application.add_handler(CommandHandler("stats", user_stats_command))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        application.add_handler(CallbackQueryHandler(handle_admin_callback, pattern="^admin_"))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        logger.info("Bot started successfully!")
        application.run_polling()
        
    except Exception as e:
        logger.error(f"Failed to start bot: {e}")

if __name__ == '__main__':
    main()